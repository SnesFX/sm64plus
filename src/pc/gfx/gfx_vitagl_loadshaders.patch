diff --git a/src/pc/gfx/gfx_vitagl.c b/src/pc/gfx/gfx_vitagl.c
index 69ef360..da2713c 100644
--- a/src/pc/gfx/gfx_vitagl.c
+++ b/src/pc/gfx/gfx_vitagl.c
@@ -107,7 +107,7 @@ static const char *shader_item_to_str(uint32_t item, bool with_alpha, bool only_
 }
 
 static void append_formula(char *buf, size_t *len, uint8_t c[2][4], bool do_single, bool do_multiply,
-                           bool do_lerp, bool with_alpha, bool only_alpha, bool opt_alpha) {
+                           bool do_mix, bool with_alpha, bool only_alpha, bool opt_alpha) {
     if (do_single) {
         append_str(buf, len,
                    shader_item_to_str(c[only_alpha][3], with_alpha, only_alpha, opt_alpha, false));
@@ -117,7 +117,7 @@ static void append_formula(char *buf, size_t *len, uint8_t c[2][4], bool do_sing
         append_str(buf, len, " * ");
         append_str(buf, len,
                    shader_item_to_str(c[only_alpha][2], with_alpha, only_alpha, opt_alpha, true));
-    } else if (do_lerp) {
+    } else if (do_mix) {
         append_str(buf, len, "lerp(");
         append_str(buf, len,
                    shader_item_to_str(c[only_alpha][1], with_alpha, only_alpha, opt_alpha, false));
@@ -172,7 +172,7 @@ static struct ShaderProgram *gfx_vitagl_create_and_load_new_shader(uint32_t shad
     }
     bool do_single[2] = { c[0][2] == 0, c[1][2] == 0 };
     bool do_multiply[2] = { c[0][1] == 0 && c[0][3] == 0, c[1][1] == 0 && c[1][3] == 0 };
-    bool do_lerp[2] = { c[0][1] == c[0][3], c[1][1] == c[1][3] };
+    bool do_mix[2] = { c[0][1] == c[0][3], c[1][1] == c[1][3] };
     bool color_alpha_same = (shader_id & 0xfff) == ((shader_id >> 12) & 0xfff);
 
     char vs_buf[1024];
@@ -184,109 +184,38 @@ static struct ShaderProgram *gfx_vitagl_create_and_load_new_shader(uint32_t shad
     bool has_texture = false;
     bool has_fog = false;
 
-    // Vertex Shader
-    append_line(vs_buf, &vs_len, "float4 main(");
-    append_line(vs_buf, &vs_len, "float4 aVtxPos,");
     if (used_textures[0] || used_textures[1]) {
-        append_line(vs_buf, &vs_len, "float2 aTexCoord,");
         num_floats += 2;
         has_texture = true;
     }
     if (opt_fog) {
-        append_line(vs_buf, &vs_len, "float4 aFog,");
         num_floats += 4;
         has_fog = true;
     }
     for (int i = 0; i < num_inputs; i++) {
-        vs_len += sprintf(vs_buf + vs_len, "float%d aInput%d,\n", opt_alpha ? 4 : 3, i + 1, i + 2);
         num_floats += opt_alpha ? 4 : 3;
     }
-    if (used_textures[0] || used_textures[1]) {
-        append_line(vs_buf, &vs_len, "out float2 vTexCoord : TEXCOORD0,");
-    }
-    if (opt_fog) {
-        append_line(vs_buf, &vs_len, "out float4 vFog : TEXCOORD1,");
-    }
-    for (int i = 0; i < num_inputs; i++) {
-        vs_len += sprintf(vs_buf + vs_len, "out float%d vInput%d : TEXCOORD%d,\n", opt_alpha ? 4 : 3,
-                          i + 1, i + 2);
-    }
-    vs_buf[vs_len - 2] = ' ';
-    append_line(vs_buf, &vs_len, ") : POSITION \n{");
-    if (used_textures[0] || used_textures[1]) {
-        append_line(vs_buf, &vs_len, "vTexCoord = aTexCoord;");
-    }
-    if (opt_fog) {
-        append_line(vs_buf, &vs_len, "vFog = aFog;");
-    }
-    for (int i = 0; i < num_inputs; i++) {
-        vs_len += sprintf(vs_buf + vs_len, "vInput%d = aInput%d;\n", i + 1, i + 1);
-    }
-    append_line(vs_buf, &vs_len, "return aVtxPos;");
-    append_line(vs_buf, &vs_len, "}");
 
-    // Fragment shader.
-    append_line(fs_buf, &fs_len, "float4 main(");
-    if (used_textures[0] || used_textures[1]) {
-        append_line(fs_buf, &fs_len, "float2 vTexCoord : TEXCOORD0,");
-    }
-    if (opt_fog) {
-        append_line(fs_buf, &fs_len, "float4 vFog : TEXCOORD1,");
-    }
-    for (int i = 0; i < num_inputs; i++) {
-        fs_len += sprintf(fs_buf + fs_len, "float%d vInput%d : TEXCOORD%d,\n", opt_alpha ? 4 : 3, i + 1,
-                          i + 2);
-    }
-    if (used_textures[0]) {
-        append_line(fs_buf, &fs_len, "uniform sampler2D uTex0 : TEXUNIT0,");
-    }
-    if (used_textures[1]) {
-        append_line(fs_buf, &fs_len, "uniform sampler2D uTex1 : TEXUNIT1,");
-    }
-    fs_buf[fs_len - 2] = ' ';
-    append_line(fs_buf, &fs_len, ") : COLOR \n{");
-
-    if (used_textures[0]) {
-        append_line(fs_buf, &fs_len, "float4 texVal0 = tex2D(uTex0, vTexCoord);");
-    }
-    if (used_textures[1]) {
-        append_line(fs_buf, &fs_len, "float4 texVal1 = tex2D(uTex1, vTexCoord);");
-    }
+    char filename[64];
 
-    append_str(fs_buf, &fs_len, opt_alpha ? "float4 texel = " : "float3 texel = ");
-    if (!color_alpha_same && opt_alpha) {
-        append_str(fs_buf, &fs_len, "float4(");
-        append_formula(fs_buf, &fs_len, c, do_single[0], do_multiply[0], do_lerp[0], false, false,
-                       true);
-        append_str(fs_buf, &fs_len, ", ");
-        append_formula(fs_buf, &fs_len, c, do_single[1], do_multiply[1], do_lerp[1], true, true, true);
-        append_str(fs_buf, &fs_len, ")");
-    } else {
-        append_formula(fs_buf, &fs_len, c, do_single[0], do_multiply[0], do_lerp[0], opt_alpha, false,
-                       opt_alpha);
-    }
-    append_line(fs_buf, &fs_len, ";");
+    sprintf(filename, "app0:shaders/%08X_v.cg", shader_id);
 
-    if (opt_texture_edge && opt_alpha) {
-        append_line(fs_buf, &fs_len, "if (texel.a > 0.3) texel.a = 1.0; else discard;");
-    }
-    // TODO discard if alpha is 0?
-    if (opt_fog) {
-        if (opt_alpha) {
-            append_line(fs_buf, &fs_len, "texel = float4(lerp(texel.rgb, vFog.rgb, vFog.a), texel.a);");
-        } else {
-            append_line(fs_buf, &fs_len, "texel = lerp(texel, vFog.rgb, vFog.a);");
-        }
-    }
+    FILE *fd = fopen(filename, "rb");
+    fseek(fd, 0, SEEK_END);
+    vs_len = ftell(fd);
+    fseek(fd, 0, SEEK_SET);
+    fread(vs_buf, vs_len, 1, fd);
+    fclose(fd);
+    vs_buf[vs_len] = '\0';
 
-    if (opt_alpha) {
-        append_line(fs_buf, &fs_len, "return texel;");
-    } else {
-        append_line(fs_buf, &fs_len, "return float4(texel, 1.0);");
-    }
-    append_line(fs_buf, &fs_len, "}");
+    sprintf(filename, "app0:shaders/%08X_f.cg", shader_id);
 
-    vs_buf[vs_len] = '\0';
+    fd = fopen(filename, "rb");
+    fseek(fd, 0, SEEK_END);
+    fs_len = ftell(fd);
+    fseek(fd, 0, SEEK_SET);
+    fread(fs_buf, fs_len, 1, fd);
+    fclose(fd);
     fs_buf[fs_len] = '\0';
 
     const GLchar *sources[2] = { vs_buf, fs_buf };